package adapters;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.StringTokenizer;

public class HighScore {
	private List<Player> listTopPlayer = new ArrayList<>();
	protected File file;

	public HighScore() {
		setPath();
		readData();
	}

	public void readData() {
		Player player;
		String name, path;
		int score;
		String line;
		StringTokenizer tokenizer;
		path = System.getProperty("user.home") + "\\.minesweeper\\highscore";
		File file = new File(path);
		try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
			while ((line = reader.readLine()) != null) {
				tokenizer = new StringTokenizer(line, "|");
				name = tokenizer.nextToken();
				score = Integer.parseInt(tokenizer.nextToken());
				player = new Player(name, score);
				listTopPlayer.add(player);
			}
		} catch (Exception e) {
			System.out.println(e.toString());
		}
	}

	public boolean writeData() {
		Player player;
		String line;
		try (PrintWriter writer = new PrintWriter(new FileWriter(file, false), true)) {
			for (int i = 0; i < listTopPlayer.size(); i++) {
				player = listTopPlayer.get(i);
				line = player.getName() + "|" + player.getScore();
				writer.println(line);
			}
		} catch (Exception e) {
			System.out.println(e.toString());
			return false;
		}
		return true;
	}

	public void setPath() {
		String path = System.getProperty("user.home");
		path += File.separator + ".minesweeper" + File.separator + "highscore";
		file = new File(path);
		if (file.getParentFile().mkdirs()) {
			System.out.println("Made the directory");
		} else {
			System.out.println("Can't make the directory");
		}
		try {
			if (file.createNewFile()) {
				System.out.println("Created!");
			}
		} catch (IOException e) {
			System.out.println("Not created! " + e.toString());
		}
	}

	// Sort by decreasing
	public void sort(List<Player> list) {
		Collections.sort(listTopPlayer, new Comparator<Player>() {

			@Override
			public int compare(Player o1, Player o2) {
				int score1 = o1.getScore();
				int score2 = o2.getScore();
				if (score1 > score2)
					return -1;
				else if (score1 == score2)
					return 0;
				else
					return 1;
			}

		});
	}

	public void removeAll() {
		listTopPlayer.clear();
	}

	public List<Player> getListTopPlayer() {
		return listTopPlayer;
	}

	public void setListTopPlayer(List<Player> listTopPlayer) {
		this.listTopPlayer = listTopPlayer;
	}

}
