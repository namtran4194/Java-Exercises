package security;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.spec.AlgorithmParameterSpec;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

public class EncrypterDecrypter {
	Cipher eCipher, dCipher;
	public static final String strPassword = "password12345678";
	public static SecretKeySpec keySpec = new SecretKeySpec(strPassword.getBytes(), "AES");

	public EncrypterDecrypter() {
		try {
			AlgorithmParameterSpec paramSpec = new IvParameterSpec(strPassword.getBytes());
			eCipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
			dCipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
			eCipher.init(Cipher.ENCRYPT_MODE, keySpec, paramSpec);
			dCipher.init(Cipher.DECRYPT_MODE, keySpec, paramSpec);
		} catch (Exception e) {
			System.out.println(e.toString());
		}
	}

	// encrypt() inputs a string and returns an encrypted version of that String
	public String encrypt(String string) {
		String encryptedString = null;
		try {
			// Encode the string into bytes using utf-8
			byte[] utf8 = string.getBytes("UTF-8");
			// Encrypt
			byte[] enc = eCipher.doFinal(utf8);
			// Encode bytes to base64 to get a string
			encryptedString = new BASE64Encoder().encode(enc);
		} catch (BadPaddingException | UnsupportedEncodingException | IllegalBlockSizeException e) {
			System.out.println(e.toString());
		}
		return encryptedString;
	}

	// decrypt() inputs a string and returns an encrypted version of that String
	public String decrypt(String string) {
		String decryptedString = null;

		try {
			// Decode base64 to get bytes
			byte[] dec = new BASE64Decoder().decodeBuffer(string);
			// Decrypt
			byte[] utf8 = dCipher.doFinal(dec);
			// Decode using utf-8
			decryptedString = new String(utf8, "UTF-8");
		} catch (IOException | IllegalBlockSizeException | BadPaddingException e) {
			System.out.println(e.toString());
		}
		return decryptedString;
	}
}
