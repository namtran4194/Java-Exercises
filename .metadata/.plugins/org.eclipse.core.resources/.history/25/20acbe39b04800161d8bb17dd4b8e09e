package adapters;

import java.util.ArrayList;
import java.util.List;

/** AIPlayer using Minimax algorithm */
public class AIPlayerTableLookup extends AIPlayer {
	// Moves {row, col} in order of preferences. {0, 0} at top-left corner
	private int[][] preferredMoves = { { 1, 1 }, { 0, 0 }, { 0, 2 }, { 2, 0 }, { 2, 2 }, { 0, 1 }, { 1, 0 }, { 1, 2 },
			{ 2, 1 } };

	public AIPlayerTableLookup(Board board) {
		super(board);
	}

	/**
	 * Search for the first empty cell, according to the preferences
	 * Assume that next move is available, i.e., not gameover
	 * 
	 * @return int[2] of {row, col}
	 */
	@Override
	int[] move() {
		for (int[] move : preferredMoves) {
			if (cells[move[0]][move[1]].content == Seed.EMPTY) {
				return move;
			}
		}
		assert false : "No empty cell?!";
		return null;
	}

	private int[] minimax(int depth, Seed player){
		List<int[]> nextMoves = generateMove();
	}
	/** Find all valid next moves.
    Return List of moves in int[2] of {row, col} or empty list if gameover */
	private List<int[]> generateMove(){
		List<int[]> nextMoves = new ArrayList<>();
		return nextMoves;
	}
}
